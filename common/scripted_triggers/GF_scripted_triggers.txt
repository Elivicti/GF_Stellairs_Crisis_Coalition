GF_can_doll_fill_ruler_job = {
	hidden_trigger = {
		exists = owner
		owner = {
			OR = {
				is_GF_authority = no
				has_policy_flag = GF_doll_work_policy_free
				has_policy_flag = GF_doll_work_policy_high
			}
		}
	}
}

GF_can_doll_fill_specialist_job = {
	hidden_trigger = {
		exists = owner
		owner = {
			OR = {
				is_GF_authority = no
				has_policy_flag = GF_doll_work_policy_free
				has_policy_flag = GF_doll_work_policy_high
				has_policy_flag = GF_doll_work_policy_middle
			}
		}
	}
}

can_destroy_planet_with_PLANET_KILLER_GF_COLLAPSE_ENDING_FLASH = {
	custom_tooltip = {
		fail_text = is_not_a_standard_planet_or_megastructure
		is_a_planet_megastructure = yes
	}
	custom_tooltip = {
		fail_text = is_shielded
		NOR = {
			is_planet_class = pc_shielded
			is_planet_class = pc_ringworld_shielded
			is_planet_class = pc_habitat_shielded
		}
	}
	#custom_tooltip = {
		#fail_text = is_not_hostile
		OR = {
			custom_tooltip = {
				text = is_not_hostile_cracker
				OR = {
					AND = {
						exists = space_owner
						space_owner = {
							OR = {
								is_at_war_with = from.owner
								is_country_type = swarm
								is_country_type = extradimensional
								is_country_type = extradimensional_2
								is_country_type = extradimensional_3
								is_country_type = ai_empire
							}
						}
					}
					AND = { # colony
						exists = owner
						owner = {
							OR = {
								is_at_war_with = from.owner
								is_country_type = swarm
								is_country_type = extradimensional
								is_country_type = extradimensional_2
								is_country_type = extradimensional_3
								is_country_type = ai_empire
							}
						}
					}
					AND = { # primitive
						exists = space_owner
						exists = owner
						owner = {
							is_primitive = yes
						}
						space_owner = {
							OR = {
								is_at_war_with = from.owner
								is_country_type = swarm
								is_country_type = extradimensional
								is_country_type = extradimensional_2
								is_country_type = extradimensional_3
								is_country_type = ai_empire
							}
						}
					}
				}
			}
			custom_tooltip = {
				text = not_barren_molten_frozen_toxic_test_fire
				NOT = { exists = owner }
				OR = {
					NOT = { exists = space_owner }
					AND = {
						exists = space_owner
						space_owner = { is_same_value = from.owner }
					}
				}
				OR = {
					is_planet_class = pc_barren
					is_planet_class = pc_barren_cold
					is_planet_class = pc_frozen
					is_planet_class = pc_molten
					is_planet_class = pc_toxic
					is_planet_class = pc_desert
					is_planet_class = pc_tropical
					is_planet_class = pc_arid
					is_planet_class = pc_continental
					is_planet_class = pc_ocean
					is_planet_class = pc_tundra
					is_planet_class = pc_arctic
					is_planet_class = pc_alpine
					is_planet_class = pc_savannah
					is_planet_class = pc_gaia
					is_planet_class = pc_relic
					is_planet_class = pc_nuked
					is_planet_class = pc_ringworld_habitable
					is_planet_class = pc_habitat
				}
			}
		}
	#}
}

# this = planet
GF_collapse_relic_site_requirements = {
	OR = {
		is_planet_class = pc_barren
		is_planet_class = pc_barren_cold
		is_planet_class = pc_molten
		is_planet_class = pc_frozen
		is_planet_class = pc_toxic
		habitable_planet = yes
	}
	NOR = {
		exists = archaeological_site
		has_planet_flag = suppress_archaeological_sites
		is_colony = yes
		has_modifier = holy_planet
	}
}

GF_default_zion_comm_trigger = {
	AND = {
		has_authority = GF_auth_commonwealth
		has_country_flag = flag_GF_established_communication_with_zion
	}
}

# scope = species, from = country
GF_is_gavirul_species = {
	hidden_trigger = {
		has_species_flag = flag_GF_GAVIRUL_species
	}
	from = {
		custom_tooltip = {
			has_country_flag = flag_GF_gavirul_project_completed
			fail_text = GF_require_gavirul_project_finished
		}
	}
}

# scope = country, checks the country's authority and if v_GF_elid_threat_level is bigger than 0
GF_default_elid_event_trigger = {
	AND = {
		has_authority = GF_auth_commonwealth
		event_target:GF_home_world = {
			check_variable = {
				which = v_GF_elid_threat_level
				value > 0
			}
		}
	}
}

# scope = planet
GF_planet_has_contaminated_zone = {
	OR = {
		has_deposit = d_GF_black_zone
		has_deposit = d_GF_red_zone
		has_deposit = d_GF_yellow_zone
	}
}

# this = system
GF_sf_event_system_candidate_trigger = {
	any_country = {
		has_origin = GF_origin_commonwealth
		capital_scope.solar_system = {
			distance = {
				source = prevprev
				max_jumps = 7
				min_jumps = 2
			}
		}
	}
}

# this = planet
# TYPE: barren | asteroid
GF_sf_event_planet_trigger = {
	has_planet_flag = flag_p_GF_sf_event_$TYPE$_candidate
}

# this = system
# TYPE: barren | asteroid
GF_sf_event_system_trigger = {
	has_star_flag = flag_s_GF_sf_event_system_candidate
	NOT = { has_star_flag = flag_s_GF_sf_event_system }
	any_system_planet = {
		GF_sf_event_planet_trigger = { TYPE = $TYPE$ }
	}
	OR = {
		NOT = { exists = space_owner }
		AND = {
			exists = space_owner
			space_owner = { is_same_value = root.owner }
		}
	}
}


# scope = country

@high_zion_favor_threshold		= 50
@decent_zion_favor_threshold 	= 30
@low_zion_favor_threshold		= 0

GF_has_zion_favor_very_high = {
	AND = {
		is_variable_set = v_GF_zion_favor
		check_variable_arithmetic = {
			which = v_GF_zion_favor
			subtract = @decent_zion_favor_threshold
			value >= @high_zion_favor_threshold			# value >= @high + @decent
		}
	}
	
}

GF_has_zion_favor_high = {
	AND = {
		is_variable_set = v_GF_zion_favor
		check_variable = {
			which = v_GF_zion_favor
			value >= @high_zion_favor_threshold
		}
	}
	
}

GF_has_zion_favor_decent = {
	AND = {
		is_variable_set = v_GF_zion_favor
		check_variable = {
			which = v_GF_zion_favor
			value >= @decent_zion_favor_threshold
		}
	}
}

GF_has_zion_favor_mid = {
	AND = {
		is_variable_set = v_GF_zion_favor
		check_variable = {
			which = v_GF_zion_favor
			value >= @low_zion_favor_threshold
		}
	}
}

GF_has_zion_favor_low = {
	AND = {
		is_variable_set = v_GF_zion_favor
		check_variable = {
			which = v_GF_zion_favor
			value < @low_zion_favor_threshold
		}
	}
}

GF_require_zion_favor_high = {
	custom_tooltip = {
		text = GF_require_zion_favor_high
		GF_has_zion_favor_high = yes
	}
}
GF_require_zion_favor_decent = {
	custom_tooltip = {
		text = GF_require_zion_favor_decent
		GF_has_zion_favor_decent = yes
	}
}
GF_require_zion_favor_mid = {
	custom_tooltip = {
		text = GF_require_zion_favor_mid
		GF_has_zion_favor_mid = yes
	}
}
# GF_require_zion_favor_low = {
# 	custom_tooltip = {
# 		text = GF_require_zion_favor_low
# 		GF_has_zion_favor_low = yes
# 	}
# }

# 检查锡安项目所需的资源库存
# 需要$TIER$ * $RES$月收入的$RES$，最少为@GF_zion_project_$RES$_cost_$TIER$（定义于GF_scripted_variables.txt）
# scope = country
GF_zion_require_resource_stockpile = {
	custom_tooltip = {
		text = GF_zion_require_$RES$_stockpile_$TIER$
		resource_stockpile_compare = {
			resource = $RES$
			value >= value:GF_monthly_resource_income|RES|$RES$|MULT|$TIER$|MIN|@GF_zion_project_$RES$_cost_$TIER$|
		}
	}
}

# scope = pop
GF_is_non_doll_robot_pop = {
	AND = {
		NOT = { has_trait = GF_trait_doll }
		is_robot_pop = yes
	}
}

# scope = country
GF_has_robotic_leaders = {
	any_owned_leader = {
		species = { is_robotic = yes }
	}
}

# scope = leader
GF_is_enhanced_leader = {
	OR = {
		has_trait = GF_trait_leader_enhanced_official
		has_trait = GF_trait_leader_enhanced_scientist
		has_trait = GF_trait_leader_enhanced_commander
	}
}

# scope = leader
GF_leader_has_vanilla_negative_traits = {
	num_leader_traits = {
		value > 0
		negative = yes
	}
}

# scope = leader
GF_leader_has_core_glitch = {
	OR = {
		has_trait = GF_trait_leader_core_glitch_official
		has_trait = GF_trait_leader_core_glitch_scientist
		has_trait = GF_trait_leader_core_glitch_commander
	}
}

# scope = country
GF_should_country_has_collapse_liquid_deficit_debuff = {
	OR = {
		has_country_flag = solarpunk_country
		has_country_flag = flag_GF_country_has_collapse_liquid_deficit_debuff
		has_technology = $OR_HAS_TECH$
	}
}

# scope = planet
GF_is_habitat = {
	OR = {
		is_planet_class = pc_habitat
		has_planet_flag = flag_p_GF_is_habitat_type_planet	# 兼容
	}
}

# scope = megastructure
GF_is_computing_center = {
	OR = {
		is_megastructure_type = GF_computing_center_0
		is_megastructure_type = GF_computing_center_1
		is_megastructure_type = GF_computing_center_2
		is_megastructure_type = GF_computing_center_3
	}
}

# scope = pop
GF_can_pop_join_freedom_kindom = {
	has_citizenship_rights = yes
}