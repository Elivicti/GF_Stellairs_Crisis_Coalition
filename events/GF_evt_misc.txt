# 一些杂项事件
namespace = GF_evt_misc

country_event = {
	id = GF_evt_misc.100
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		GF_OGAS_has_used_threads_over_cap = yes
	}

	immediate = {
		fire_on_action = {
			on_action = on_OGAS_used_threads_over_cap
			scopes = { from = from }
		}
	}
}

### on_single_player_save_game_load
# no scope

# 存档加载，用于处理部分旧版本升级、更新日志等
event = {
	id = GF_evt_misc.1000
	hide_window = yes

	is_triggered_only = yes
	immediate = {
		every_country = {
			limit = { has_authority = GF_auth_commonwealth }
			# 禁用原版派系
			if = {
				limit = { NOT = { has_country_flag = suppress_vanilla_factions } }
				set_country_flag = suppress_vanilla_factions
			}
			# 更新日志提醒
			country_event = { id = GF_evt_misc.1001 days = 1 }
			# 自动化遥控殖民地效果
			every_owned_planet = {
				limit = {
					has_modifier = GF_auto_colony
					NOT = { has_planet_flag = flag_p_GF_auto_colony }
				}
				planet_event = { id = GF_colony.10 }
			}
			# 人形领袖立绘
			country_event = { id = GF_doll_leader.18 }
		}
	}
}

country_event = {
	id = GF_evt_misc.1001
	title = contact
	desc = GF_evt_misc.1001.desc

	diplomatic = yes
	custom_gui = "GF_DiplomaticEventWindow"
	custom_gui_option = "GF_DiplomaticEventWindow_Option"
	picture_event_data = {
		portrait = event_target:GF_ogas_leader
		room = ethic_griffin_room
	}

	is_triggered_only = yes
	trigger = {
		event_target:global_event_country = {
			check_variable = {
				which = v_GF_Stellaris_MOD_VER
				value < @GF_Stellaris_MOD_VER
			}
		}
	}

	immediate = {
		hidden_effect = {
			event_target:global_event_country = {
				set_variable = {
					which = v_GF_Stellaris_MOD_VER
					value = @GF_Stellaris_MOD_VER
				}
			}
		}
	}

	option = {
		name = GF_evt_misc.1001.a
	}
}


country_event = {
	id = GF_evt_misc.200
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		has_valid_civic = GF_civic_90WISH
		any_owned_leader = { is_councilor_type = GF_councilor_90Wish }
	}

	immediate = {
		random_owned_leader = {
			limit = { is_councilor_type = GF_councilor_90Wish }
			switch = {
				trigger = leader_class
				governor = {
					prev = {
						every_owned_leader = {
							limit = { leader_class = governor }
							add_experience = 50
						}
					}
				}
				scientist = {
					prev = {
						every_owned_leader = {
							limit = { leader_class = scientist }
							add_experience = 50
						}
					}
				}
			}
		}
	}
}

