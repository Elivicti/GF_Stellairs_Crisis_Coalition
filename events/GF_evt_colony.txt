namespace = GF_colony

### Auto Colony
@GF_auto_colony_boundary_effect_interval = 30
@GF_auto_colony_boundary_start = 15
@GF_auto_colony_boundary_addend = 25

# 计算方式：factor = (equivalent_pop_load - capacity) / addend
# equivalent_pop_load = num_pops - 休眠人形数 * 0.75 (等价于：每人口产生1负载，休眠人形产生0.25负载)
# capacity = start + mod_capacity_add
# 边际效应Debuff从第(capacity + 1)个人口开始起作用，直到第(capacity + addend)个人口时，factor = 1
# 由于mod_capacity_add不是整数，所以理论上factor = 1时的人口数大概率不是整数，但是并不影响整体的效果
# factor的计算无上限
# factor将与边际效应Debuff相乘
planet_event = {
	id = GF_colony.10
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		has_modifier = GF_auto_colony
	}

	immediate = {
		set_variable = {
			which = v_GF_auto_colony_equivalent_pop_load
			value = 0
		}
		set_variable = {
			# modifier = GF_auto_colony_capacity_add
			which = v_GF_auto_colony_capacity
			value = modifier:GF_auto_colony_capacity_add
		}
		change_variable = {
			which = v_GF_auto_colony_capacity
			value = @GF_auto_colony_boundary_start
		}
		every_owned_pop = {
			if = {
				limit = { has_job = GF_dormancy_doll }
				prev = {
					change_variable = {
						which = v_GF_auto_colony_equivalent_pop_load
						value = 0.25
					}
				}
			}
			else = {
				prev = {
					change_variable = {
						which = v_GF_auto_colony_equivalent_pop_load
						value = 1
					}
				}
			}
		}

		if = {
			limit = {
				check_variable = {
					which = v_GF_auto_colony_equivalent_pop_load
					value > v_GF_auto_colony_capacity
				}
			}
			set_variable = {
				which = v_GF_auto_colony_boundary_factor
				value = v_GF_auto_colony_equivalent_pop_load
			}
			subtract_variable = {
				which = v_GF_auto_colony_boundary_factor
				value = v_GF_auto_colony_capacity
			}
			divide_variable = {
				which = v_GF_auto_colony_boundary_factor
				value = @GF_auto_colony_boundary_addend
			}
			add_modifier = {
				modifier = GF_auto_colony_boundary_modifier
				mult = this.v_GF_auto_colony_boundary_factor
				days = @GF_auto_colony_boundary_effect_interval
			}
		}
		set_colony_type = col_GF_auto_colony
		planet_event = {
			id = GF_colony.10
			days = @GF_auto_colony_boundary_effect_interval
		}
	}
}




### on_planet_transfer
# FromFrom = Former Owner (if any)
# From = Country scope (new owner)
# This = Planet scope

# 处理球上的人口组装建筑
planet_event = {
	id = GF_colony.2000
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		OR = {
			has_building = building_robot_assembly_plant
			has_building = building_robot_assembly_complex
			has_building = building_machine_assembly_plant
			has_building = building_machine_assembly_complex
		}
		from = { has_authority = GF_auth_commonwealth }
	}

	immediate = {
		remove_building = building_robot_assembly_plant
		remove_building = building_robot_assembly_complex
		remove_building = building_machine_assembly_plant
		remove_building = building_machine_assembly_complex
		add_building = building_GF_doll_factory
	}
}