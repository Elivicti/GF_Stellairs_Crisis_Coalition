namespace = GF_doll_leader

# on_leader_spawned
# a new leader is generated for an empire, to be available for recruitment
# scope: country, from: leader
country_event = {
	id = GF_doll_leader.0
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		from = {
			species = { has_trait = GF_trait_doll }
			GF_is_ogas_leader = no
		}
	}

	immediate = {
		from = {
			add_trait = GF_trait_leader_doll
			switch = {
				trigger = leader_class
				admiral = {
					if = {
						limit = { species = { has_trait = GF_trait_tacticalchip } }
						add_trait = GF_trait_leader_admiral_plus
					}
				}
				general = {
					if = {
						limit = { species = { has_trait = GF_trait_tacticalchip } }
						add_trait = GF_trait_leader_general_plus
					}
				}
				scientist = {
					if = {
						limit = { species = { has_trait = GF_trait_logical_subroutine } }
						add_trait = GF_trait_leader_scientist_plus
					}
				}
				governor = {
					if = {
						limit = { species = { has_trait = GF_trait_zener_protocol } }
						add_trait = GF_trait_leader_governor_plus
					}
				}
			}
		}
	}
}

# from = species
country_event = {
	id = GF_doll_leader.1
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		from = { has_trait = GF_trait_tacticalchip }
	}

	immediate = {
		every_owned_leader = {
			limit = {
				is_exact_same_species = from
				NOR = {
					has_trait = GF_trait_leader_admiral_plus
					has_trait = GF_trait_leader_general_plus
				}
			}
			switch = {
				trigger = leader_class
				admiral = { add_trait = GF_trait_leader_admiral_plus }
				general = { add_trait = GF_trait_leader_general_plus }
			}
		}
	}
}

# from = species
country_event = {
	id = GF_doll_leader.2
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		from = { has_trait = GF_trait_zener_protocol }
	}

	immediate = {
		every_owned_leader = {
			limit = {
				is_exact_same_species = from
				leader_class = governor
				NOT = { has_trait = GF_trait_leader_governor_plus }
				NOT = { has_leader_flag = flag_GF_ogas_leader }
			}
			add_trait = GF_trait_leader_governor_plus
		}
	}
}

# from = species
country_event = {
	id = GF_doll_leader.3
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		from = { has_trait = GF_trait_logical_subroutine }
	}

	immediate = {
		every_owned_leader = {
			limit = {
				is_exact_same_species = from
				leader_class = scientist
				NOT = { has_trait = GF_trait_leader_scientist_plus }
			}
			add_trait = GF_trait_leader_scientist_plus
		}
	}
}

# on_leader_spawned
# from = leader
country_event = {
	id = GF_doll_leader.10
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		from = { GF_portrait_correction_allowed = yes }
	}

	immediate = {
		from = { GF_set_random_doll_leader_portrait_and_name = yes }
	}
}

country_event = {
	id = GF_doll_leader.15
	hide_window = yes

	is_triggered_only = yes
	trigger = {
		from = { has_trait = GF_trait_doll }
	}

	immediate = {
		every_owned_leader = {
			limit = {
				is_exact_same_species = from
				GF_has_doll_leader_flag = yes
			}
			GF_correct_doll_leader_portrait_and_name = yes
		}
		every_envoy = {
			limit = {
				is_exact_same_species = from
				GF_has_doll_leader_flag = yes
			}
			GF_correct_doll_leader_portrait_and_name = yes
		}
	}
}

country_event = {
	id = GF_doll_leader.18
	hide_window = yes

	is_triggered_only = yes
	immediate = {
		every_owned_leader = {
			limit = { GF_has_doll_leader_flag = yes }
			GF_correct_doll_leader_portrait_and_name = yes
		}
		every_envoy = {
			limit = { GF_has_doll_leader_flag = yes }
			GF_correct_doll_leader_portrait_and_name = yes
		}
	}
}

country_event = {
	id = GF_doll_leader.100
	title = GF_doll_leader.100.name
	desc = GF_doll_leader.100.desc

	picture = GFX_evt_circuitry_modification

	is_triggered_only = yes

	option = {
		name = GF_doll_leader.100.confirm
		allow = {
			custom_tooltip = {
				text = GF_require_any_doll_leader_has_vanilla_negative_traits
				count_owned_leader = {
					limit = {
						has_trait = GF_trait_leader_doll
						GF_leader_has_vanilla_negative_traits = yes
					}
					count > 0
				}
			}
			resource_stockpile_compare = {
				resource = energy
				value >= 1000
				mult = value:GF_count_robotic_leader_with_vanilla_negative_traits
			}
			resource_stockpile_compare = {
				resource = unity
				value >= 1000
			}
		}
		add_resource = {
			energy = -1000
			mult = value:GF_count_robotic_leader_with_vanilla_negative_traits
		}
		add_resource = { unity = -1000 }
		add_modifier = {
			modifier = GF_edict_doll_reprogram_cooldown
			years = 1
		}
		custom_tooltip =  GF_doll_reprogram_effect_leader_list_tooltip
		owned_leader_list_tooltip = {
			limit = {
				has_trait = GF_trait_leader_doll
				GF_leader_has_vanilla_negative_traits = yes
			}
		}
		hidden_effect = {
			every_owned_leader = {
				limit = { has_trait = GF_trait_leader_doll }
				remove_trait = all_negative
			}
			country_event = {
				id = GF_doll_leader.105
				days = 360
			}
			set_saved_date = {
				key = GF_doll_reprogram_cooldown_finish
				days_from_present = 360
				expires = 360
			}
		}
	}

	option = {
		name = CANCEL
	}
}

country_event = {
	id = GF_doll_leader.105
	hide_window = yes
	is_triggered_only = yes

	immediate = {
		create_message = {
			type = MESSAGE_TYPE_GF_EDICT_COOLDOWN_FINISHED
			days = 30
			localization = "MESSAGE_GF_EDICT_COOLDOWN_FINISHED_DESC"
			variable = {
				type = key
				localization = EDICT
				value = edict_GF_doll_reprogram
			}
		}
	}
}